use core::ops::{Index, IndexMut};
pub struct Palette {
    inner: [u8; 0x20],
}
impl Index<u16> for Palette {
    type Output = u8;
    fn index(&self, index: u16) -> &u8 {
        &self.inner[Self::addr(index)]
    }
}

impl IndexMut<u16> for Palette {
    fn index_mut(&mut self, index: u16) -> &mut u8 {
        &mut self.inner[Self::addr(index)]
    }
}

impl Palette {
    pub fn new() -> Palette {
        Palette { inner: [0; 0x20] }
    }
    fn addr(addr: u16) -> usize {
        let addr = (addr & 0x1F) as usize;
        match addr {
            0x10 => 0x00,
            0x14 => 0x04,
            0x18 => 0x08,
            0x1C => 0x0C,
            _ => addr,
        }
    }
    pub fn get_color_by_index(&self, index: u8) -> Option<(u8, u8, u8)> {
        match index {
            0x10 | 0x14 | 0x18 | 0x1C => None,
            0x00 | 0x04 | 0x08 | 0x0C => Some(PALETTE[self.inner[0] as usize]),
            _ => Some(PALETTE[self.inner[index as usize] as usize]),
        }
    }
}

static PALETTE: [(u8, u8, u8); 64] = [
    (0x7F, 0x7F, 0x7F),
    (0x20, 0x00, 0xB0),
    (0x28, 0x00, 0xB8),
    (0x60, 0x10, 0xA0),
    (0x98, 0x20, 0x78),
    (0xB0, 0x10, 0x30),
    (0xA0, 0x30, 0x00),
    (0x78, 0x40, 0x00),
    (0x48, 0x58, 0x00),
    (0x38, 0x68, 0x00),
    (0x38, 0x6C, 0x00),
    (0x30, 0x60, 0x40),
    (0x30, 0x50, 0x80),
    (0x00, 0x00, 0x00),
    (0x00, 0x00, 0x00),
    (0x00, 0x00, 0x00),
    (0xBC, 0xBC, 0xBC),
    (0x40, 0x60, 0xF8),
    (0x40, 0x40, 0xFF),
    (0x90, 0x40, 0xF0),
    (0xD8, 0x40, 0xC0),
    (0xD8, 0x40, 0x60),
    (0xE0, 0x50, 0x00),
    (0xC0, 0x70, 0x00),
    (0x88, 0x88, 0x00),
    (0x50, 0xA0, 0x00),
    (0x48, 0xA8, 0x10),
    (0x48, 0xA0, 0x68),
    (0x40, 0x90, 0xC0),
    (0x00, 0x00, 0x00),
    (0x00, 0x00, 0x00),
    (0x00, 0x00, 0x00),
    (0xFF, 0xFF, 0xFF),
    (0x60, 0xA0, 0xFF),
    (0x50, 0x80, 0xFF),
    (0xA0, 0x70, 0xFF),
    (0xF0, 0x60, 0xFF),
    (0xFF, 0x60, 0xB0),
    (0xFF, 0x78, 0x30),
    (0xFF, 0xA0, 0x00),
    (0xE8, 0xD0, 0x20),
    (0x98, 0xE8, 0x00),
    (0x70, 0xF0, 0x40),
    (0x70, 0xE0, 0x90),
    (0x60, 0xD0, 0xE0),
    (0x60, 0x60, 0x60),
    (0x00, 0x00, 0x00),
    (0x00, 0x00, 0x00),
    (0xFF, 0xFF, 0xFF),
    (0x90, 0xD0, 0xFF),
    (0xA0, 0xB8, 0xFF),
    (0xC0, 0xB0, 0xFF),
    (0xE0, 0xB0, 0xFF),
    (0xFF, 0xB8, 0xE8),
    (0xFF, 0xC8, 0xB8),
    (0xFF, 0xD8, 0xA0),
    (0xFF, 0xF0, 0x90),
    (0xC8, 0xF0, 0x80),
    (0xA0, 0xF0, 0xA0),
    (0xA0, 0xFF, 0xC8),
    (0xA0, 0xFF, 0xF0),
    (0xA0, 0xA0, 0xA0),
    (0x00, 0x00, 0x00),
    (0x00, 0x00, 0x00),
];
